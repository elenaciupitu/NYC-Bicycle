# -*- coding: utf-8 -*-
"""NYC-Bicycle_counts.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kWfC9LUo8SQhVRTv6VMRh2jOcmqBR4mE

## ** New York City - East River Bicycle Crossings**##

*   In this dataset, how many bicycles cross into and out of Manhattan per day?
*   How strongly do weather conditions affect bike volumes?
*   What is the top bridge in terms of bike load?
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pandas.plotting import register_matplotlib_converters
import plotly.graph_objects as go
from plotly.offline import iplot
# %matplotlib inline
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures

from sklearn.model_selection import train_test_split, KFold
from sklearn.metrics import mean_absolute_error, r2_score, mean_absolute_percentage_error

import matplotlib.pyplot as plt

from datetime import datetime
import datetime

from pandas_profiling import ProfileReport

"""# Reading and data cleanup"""

data = pd.read_csv("./NYC_Bicycle_Counts_2016_Corrected.csv", parse_dates=["Date"], infer_datetime_format=True)

data.head(10)

data.info()

data = data.rename(columns={"High Temp (°F)": "HighTemp", "Low Temp (°F)": "LowTemp"})

data["NumDay"] = data["Date"].apply(lambda x: x.split("-")[0])
data["Month"] = data["Date"].apply(lambda x: x.split("-")[1])

data["Precipitation"] = data["Precipitation"].replace(["0.47 (S)"], "0.47")
data["Precipitation"] = data["Precipitation"].replace(["T"], "0")
data["Brooklyn Bridge"] = data["Brooklyn Bridge"].apply(lambda x: x.replace(",", ""))
data["Manhattan Bridge"] = data["Manhattan Bridge"].apply(lambda x: x.replace(",", ""))
data["Williamsburg Bridge"] = data["Williamsburg Bridge"].apply(lambda x: x.replace(",", ""))
data["Queensboro Bridge"] = data["Queensboro Bridge"].apply(lambda x: x.replace(",", ""))
data["Total"] = data["Total"].apply(lambda x: x.replace(",", ""))
data["Date"] = data["Date"].apply(lambda x: x + "-2016")
data['Date'] = pd.to_datetime(data['Date'])

data["Month"] = data["Month"].replace(["Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct"], [4, 5, 6, 7, 8, 9, 10])

data["Precipitation"] = data["Precipitation"].astype(float)
data["Brooklyn Bridge"] = data["Brooklyn Bridge"].astype(float)
data["Manhattan Bridge"] = data["Manhattan Bridge"].astype(float)
data["Williamsburg Bridge"] = data["Williamsburg Bridge"].astype(float)
data["Queensboro Bridge"] = data["Queensboro Bridge"].astype(float)
data["Total"] = data["Total"].astype(float)

data["Day_nr"] = data["Day"].replace(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], [1, 2, 3, 4, 5, 6, 7])
data["Month_nr"] = data["Month"].replace(["Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct"], [4, 5, 6, 7, 8, 9, 10])

data["NumDay"] = data["NumDay"].astype(float)
data["Day_nr"] = data["Day_nr"].astype(float)
data["Month_nr"] = data["Month_nr"].astype(float)

data["is_weekend"] = data["Day_nr"].apply(lambda day: 1 if day > 5 else 0)
data["is_precipitation"] = data["Precipitation"].apply(lambda x: 1 if x > 0 else 0)
data["is_rainy_month"] = data["Month"].apply(lambda x: 1 if x in [5, 7, 10] else 0)

data.info()

data

data.describe()

data.corr()

"""# Regression"""

X = data[['Day_nr', 'Month_nr', 'HighTemp', 'LowTemp', 'Precipitation', "is_weekend", "Manhattan Bridge", "is_rainy_month"]]
y = data['Williamsburg Bridge']

X

X_train = X.iloc[:183 , :]
X_test = X.iloc[183:, :]
y_train = y.iloc[:183]
y_test = y.iloc[183:]

model = LinearRegression() # construct the model
model.fit(X_train, y_train) # antrenarea
y_predict = model.predict(X_test) # predictiile pe setul de test
print("Mean absolute error is {}".format(mean_absolute_error(y_predict, y_test))) # evaluarea performantei pe setul de test
print("Mean alsolute percentage error is {}".format(mean_absolute_percentage_error(y_predict, y_test)))
print("\n")

train_sizes = [10, 30, 40, 50, 60, 70, 110, 120, 150]

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import learning_curve


features = ['Day_nr', 'Month_nr', 'HighTemp', 'LowTemp', 'Precipitation']
target = 'Williamsburg Bridge'
train_sizes, train_scores, validation_scores = learning_curve(
estimator = LinearRegression(),
X = data[features],
y = data[target], train_sizes = train_sizes, cv = 5,
scoring = 'neg_mean_squared_error')

print('Training scores:\n\n', train_scores)
print('\n', '-' * 70) # separator to make the output easy to read
print('\nValidation scores:\n\n', validation_scores)

train_scores_mean = -train_scores.mean(axis = 1)
validation_scores_mean = -validation_scores.mean(axis = 1)
print('Mean training scores\n\n', pd.Series(train_scores_mean, index = train_sizes))
print('\n', '-' * 20) # separator
print('\nMean validation scores\n\n',pd.Series(validation_scores_mean, index = train_sizes))

import matplotlib.pyplot as plt

plt.style.use('seaborn')
plt.plot(train_sizes, train_scores_mean, label = 'Training error')
plt.plot(train_sizes, validation_scores_mean, label = 'Validation error')
plt.ylabel('MSE', fontsize = 14)
plt.xlabel('Training set size', fontsize = 14)
plt.title('Learning curves for a linear regression model', fontsize = 18, y = 1.03)
plt.legend()
plt.ylim(0, 9e+06)
plt.show()

"""### Grouping data by Day of week"""

groupby = data.groupby("Day")
days_of_week = {x: groupby.get_group(x) for x in groupby.groups}

"""### Plot Bicycle traffic per days with Matplotlib"""

fig, ax = plt.subplots()
ax.bar(data.Day, data["Total"])
ax.xaxis.set_tick_params(rotation=90)
ax.set_ylabel('Total bicycles')
plt.show()

"""### Plot Bicycle traffic per days with Plotly"""

data_agg = data.groupby(by="Day_nr").agg("mean")

trace1 = go.Bar(
      x=data_agg.index,
      y=data_agg.Total,
      name="Day",
      marker=dict(color="rgba(255, 174, 255, 0.5)",
                  line=dict(color='rgb(0, 0, 0)',
                            width=1.5)),
      
)


data_plot = [trace1]
layout = go.Layout(barmode="group")
fig = go.Figure(data=data_plot, layout=layout)
iplot(fig)

data.head()

data.info()

"""# Pandas profiling tool"""

pip install https://github.com/pandas-profiling/pandas-profiling/archive/master.zip

"""Please restart runtime, then run again and continue"""

from pandas_profiling import ProfileReport

profile = ProfileReport(data,
                        title="NYC Bicycle",
                        html={'style': {'full_width':
                                        True}},
                        sort=None)
# Save to file
profile.to_file('./report.html')

"""# **Data visualization**

### Bar plot with bicycle traffic grouped by weekday and weekend
"""

import seaborn as sns
sns.factorplot(x="is_weekend", y="Total", data=data, kind="bar")

"""### Scatter plot with precipitation"""

data.plot(x="Precipitation", y="Total", kind="scatter")

data.shape

"""### Scatter plot with high temperature"""

data.plot(x="HighTemp", y="Total", kind="scatter")

"""### Histograma with traffic grouped by "With Precipitation" and "No Precipitation"
"""

data[data["Precipitation"] == 0]["Total"].hist(alpha = 0.7)
data[data["Precipitation"] > 0]["Total"].hist(alpha = 0.7)
plt.legend(["no precipitation", "with Precipitation"])
plt.show()

"""### Histogram with Total bicycle traffic by every Bridge and standard deviation"""

fig, ax = plt.subplots()
ax.bar("Brooklyn Bridge", data["Brooklyn Bridge"].mean(),
       yerr=data["Brooklyn Bridge"].std())
ax.bar("Manhattan Bridge", data["Manhattan Bridge"].mean(),
       yerr=data["Manhattan Bridge"].std())
ax.bar("Williamsburg Bridge", data["Williamsburg Bridge"].mean(),
       yerr=data["Williamsburg Bridge"].std())
ax.bar("Queensboro Bridge", data["Queensboro Bridge"].mean(),
       yerr=data["Queensboro Bridge"].std())
ax.set_ylabel("NYC Bicycle mean")

"""### Box Plot with Total Bicycle traffic"""

fig, ax = plt.subplots()
ax.boxplot([data["Brooklyn Bridge"],
            data["Manhattan Bridge"],
            data["Williamsburg Bridge"],
            data["Queensboro Bridge"],])
ax.set_xticklabels(["Brooklyn Bridge", "Manhattan Bridge", "Williamsburg Bridge", "Queensboro Bridge"], rotation = 45)
ax.set_ylabel("Bicycles")

plt.show()

"""### Box Plot - New York City - East River Bicycle Crossings - in weekend vs not in weekend"""

import plotly.graph_objects as go

x = data["is_weekend"]

fig = go.Figure()

fig.add_trace(go.Box(
    y=data["Brooklyn Bridge"],
    x=x,
    name='Brooklyn Bridge',
    marker_color='#3D9970'
))
fig.add_trace(go.Box(
    y=data["Manhattan Bridge"],
    x=x,
    name='Manhattan Bridge',
    marker_color='#FF4136'
))
fig.add_trace(go.Box(
    y=data["Williamsburg Bridge"],
    x=x,
    name='Williamsburg Bridge',
    marker_color='#FF851B'
))
fig.add_trace(go.Box(
    y=data["Queensboro Bridge"],
    x=x,
    name='Queensboro Bridge',
    marker_color='#17becf'
))

fig.update_layout(
    title='New York City - East River Bicycle Crossings - in weekend vs not in weekend',
    yaxis_title='Bicycles',
    boxmode='group' # group together boxes of the different traces for each value of x
)

fig.show()

"""Box plot - New York City - East River Bicycle Crossings by every weekday"""

import plotly.graph_objects as go

x = data["Day_nr"]

fig = go.Figure()

fig.add_trace(go.Box(
    y=data["Brooklyn Bridge"],
    x=x,
    name='Brooklyn Bridge',
    marker_color='#3D9970'
))
fig.add_trace(go.Box(
    y=data["Manhattan Bridge"],
    x=x,
    name='Manhattan Bridge',
    marker_color='#FF4136'
))
fig.add_trace(go.Box(
    y=data["Williamsburg Bridge"],
    x=x,
    name='Williamsburg Bridge',
    marker_color='#FF851B'
))
fig.add_trace(go.Box(
    y=data["Queensboro Bridge"],
    x=x,
    name='Queensboro Bridge',
    marker_color='#17becf'
))

fig.update_layout(
    title='New York City - East River Bicycle Crossings by every weekday',
    yaxis_title='Bicycles',
    boxmode='group' # group together boxes of the different traces for each value of x
)

fig.show()

"""### Visualizing the correlations:"""

sns.heatmap(data.corr(), annot = True)
plt.show()

"""The heatmap shows that the number of rides clearly shows a negative correlation with precipitation. We also see a high positive correlation with HighTemp and rides, indicating a correlation. To validate this, lets plot Total Rides with Precipitation. As seen, the number of rides is the more on days when precipitation is 0.

### Lets see the rides across the bridges spread for the month.
"""

trace1 = go.Scatter(
      x=data.Date,
      y=data.HighTemp,
      mode="lines",
      name="HighTemp",
      marker=dict(color="rgba(255, 128, 255, 0.8)"),

)

trace2 = go.Scatter(
      x=data.Date,
      y=data.LowTemp,
      mode="lines",
      name="LowTempDate",
      marker=dict(color="rgba(255, 128, 2, 0.8)"),

)

trace3 = go.Scatter(
      x=data.Date,
      y=data.Precipitation,
      mode="lines",
      name="Precipitation",
      marker=dict(color="rgba(0, 255, 200, 0.8)"),

)
trace4 = go.Scatter(
      x=data.Date,
      y=data["Brooklyn Bridge"],
      mode="lines",
      name="Brooklyn Bridge",
      marker=dict(color='darkturquoise'),
)

trace5 = go.Scatter(
      x=data.Date,
      y=data["Manhattan Bridge"],
      mode="lines",
      name="Manhattan Bridge",
      marker=dict(color='brown'),
)

trace6 = go.Scatter(
      x=data.Date,
      y=data["Williamsburg Bridge"],
      mode="lines",
      name="Williamsburg Bridge",
      marker=dict(color='rgba(140, 86, 75, 0.8)'),
)

trace7 = go.Scatter(
      x=data.Date,
      y=data["Queensboro Bridge"],
      mode="lines",
      name="Queensboro Bridge",
      marker=dict(color='rgba(227, 119, 194, 0.8)'),
)

trace8 = go.Scatter(
      x=data.Date,
      y=data.Total,
      mode="lines",
      name="Total",
      marker=dict(color='rgba(44, 160, 44, 0.8)'),
)

data_evolution = [trace1, trace2, trace3, trace4, trace5, trace6, trace7, trace8]
layout = dict(title="Bicycles rides across the bridges spread for the month",
              xaxis=dict(title="Date", ticklen=5, zeroline=False),
)
fig = dict(data=data_evolution, layout=layout)
iplot(fig)

"""### Histogram with precipitation per day"""

fig, ax = plt.subplots()
ax.bar(data.Month, data["Precipitation"])
ax.xaxis.set_tick_params(rotation=90)
ax.set_ylabel('Precipitation')
plt.show()

"""### Histogram with total bicycle rides per days"""

fig, ax = plt.subplots()
ax.bar(data.Month, data["Total"])
ax.xaxis.set_tick_params(rotation=90)
ax.set_ylabel('Total bicycles')
plt.show()

groupby = data.groupby("Month")
days_of_week = {x: groupby.get_group(x) for x in groupby.groups}

fig, ax = plt.subplots()
ax.bar(data.Month, data["Total"])
ax.xaxis.set_tick_params(rotation=60)
ax.set_ylabel('Total bicycles')
plt.show()

"""### Histogram with mean bicycle rides per days"""

data_agg = data.groupby(by="Month").agg("mean")

trace1 = go.Bar(
      x=data_agg.index,
      y=data_agg.Total,
      name="Month",
      marker=dict(color="rgba(255, 174, 255, 0.5)",
                  line=dict(color='rgb(0, 0, 0)',
                            width=1.5)),
      
)


data_plot = [trace1]
layout = go.Layout(barmode="group")
fig = go.Figure(data=data_plot, layout=layout)
iplot(fig)

"""### Histogram mean precipitations per day"""

data_agg_rainy_month = data.groupby(by="Month").agg("mean")

trace1 = go.Bar(
      x=data_agg.index,
      y=data_agg.Precipitation,
      name="Month",
      marker=dict(color="rgba(255, 174, 255, 0.5)",
                  line=dict(color='rgb(0, 0, 0)',
                            width=1.5)),
      
)


data_plot_rainy_month = [trace1]
layout = go.Layout(barmode="group")
fig = go.Figure(data=data_plot_rainy_month, layout=layout)
iplot(fig)

"""### Scatter plot comparison with HighTemp, LowTemp and Precipitations"""

sns.pairplot(data, x_vars=['HighTemp', 'LowTemp', 'Precipitation'], y_vars='Total', kind='reg', height=6)
plt.show()

